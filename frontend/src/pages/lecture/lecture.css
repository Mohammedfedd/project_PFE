import React, { useState, useEffect } from "react";
import { 
  TiTick, 
  TiPlus, 
  TiTrash, 
  TiVideo, 
  TiDocument, 
  TiUpload,
  TiArrowLeft,
  TiPlay
} from "react-icons/ti";

const Lecture = () => {
  // Mock data for demonstration
  const [lectures, setLectures] = useState([
    { _id: "1", title: "Introduction to React", description: "Learn the basics of React components and JSX" },
    { _id: "2", title: "State Management", description: "Understanding useState and useEffect hooks" },
    { _id: "3", title: "Component Props", description: "Passing data between components" },
    { _id: "4", title: "Event Handling", description: "Managing user interactions in React" },
  ]);
  
  const [lecture, setLecture] = useState({});
  const [loading, setLoading] = useState(false);
  const [lecLoading, setLecLoading] = useState(false);
  const [show, setShow] = useState(false);
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [video, setVideo] = useState("");
  const [videoPrev, setVideoPrev] = useState("");
  const [btnLoading, setBtnLoading] = useState(false);
  
  // Mock user and progress data
  const user = { role: "admin" };
  const [completed, setCompleted] = useState(75);
  const [completedLec, setCompletedLec] = useState(3);
  const [lectLength, setLectLength] = useState(4);
  const [progress, setProgress] = useState([{
    completedLectures: ["1", "2", "3"]
  }]);

  const fetchLecture = (id) => {
    setLecLoading(true);
    setTimeout(() => {
      const selectedLecture = lectures.find(l => l._id === id);
      setLecture(selectedLecture || {});
      setLecLoading(false);
    }, 500);
  };

  const changeVideoHandler = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onloadend = () => {
        setVideoPrev(reader.result);
        setVideo(file);
      };
    }
  };

  const submitHandler = (e) => {
    e.preventDefault();
    setBtnLoading(true);
    
    setTimeout(() => {
      const newLecture = {
        _id: Date.now().toString(),
        title,
        description
      };
      setLectures([...lectures, newLecture]);
      setBtnLoading(false);
      setShow(false);
      setTitle("");
      setDescription("");
      setVideo("");
      setVideoPrev("");
    }, 1000);
  };

  const deleteHandler = (id) => {
    if (confirm("Are you sure you want to delete this lecture?")) {
      setLectures(lectures.filter(l => l._id !== id));
    }
  };

  const addProgress = (id) => {
    console.log("Adding progress for lecture:", id);
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>Loading lectures...</p>
      </div>
    );
  }

  return (
    <div className="lecture-container">
      <style jsx>{`
        .lecture-container {
          min-height: 100vh;
          background: linear-gradient(135deg, #0f0f23 0%, #1a1a3e 100%);
          color: #ffffff;
          font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          min-height: 100vh;
          background: linear-gradient(135deg, #0f0f23 0%, #1a1a3e 100%);
          color: #ffffff;
        }

        .loading-spinner {
          width: 40px;
          height: 40px;
          border: 4px solid rgba(255, 255, 255, 0.1);
          border-left: 4px solid #6366f1;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 16px;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .progress-header {
          background: rgba(255, 255, 255, 0.1);
          backdrop-filter: blur(20px);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 20px;
          padding: 24px;
          margin: 20px;
          margin-bottom: 30px;
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .progress-stats {
          display: flex;
          align-items: center;
          justify-content: space-between;
          margin-bottom: 16px;
        }

        .progress-text {
          font-size: 16px;
          font-weight: 600;
          color: #e0e0e0;
        }

        .progress-percentage {
          font-size: 24px;
          font-weight: 700;
          background: linear-gradient(45deg, #6366f1, #8b5cf6);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .progress-bar-container {
          position: relative;
          height: 12px;
          background: rgba(255, 255, 255, 0.1);
          border-radius: 10px;
          overflow: hidden;
        }

        .progress-bar {
          height: 100%;
          background: linear-gradient(90deg, #6366f1, #8b5cf6, #ec4899);
          border-radius: 10px;
          transition: width 0.6s cubic-bezier(0.4, 0, 0.2, 1);
          position: